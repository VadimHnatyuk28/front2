1. Difference between let, var and const
    Декларація - створення змінної
    Ініціалізація - присвоєння змінній значення

    Hoisting (підняття) - оголошення змінної, функції після її виклику чи Ініціалізації


    1. var можна повторно оголошувати а  let не можна повторно оголошувати і це +
    2. змінна оголошена всередині блоку:  var доступна за межами блока а  let не доступна і це +

2. Functions
    
    Functions declarations:
        1. function getFun(){
            return 'hello'
        }

        2. var square = function(a){
            return a*a
            }

        3. var factorial = function fac(n){
            return n < 2 ? 1 : n * fac(n - 1)
        }

        console.log(factorial(3))

        4.function result(f,a){
            return f()+a
        }

        var f = function(){
            return 100
        }

        console.log(result(f,2))

        5. function addSquares(a, b) {
            function square(x) {
            return x * x;
            }
            console.log(square(a) + square(b))
        }
        a = addSquares(2, 3);

        6. function outside() {
            var x = 5;
            function inside(x) {
            console.log(x * 2);
            }
            return inside;
        }
        
        outside()(10);


    Функція яка викликає саму себе - рекурсивна функція

    Замикання - доступ вложенним функціям до всім значенням та функціям які має доступ зовнішня функція

    Arguments - всі агрументи які передаються в функцію. arguments[0]

    Стрілочні функції

    (param1, param2, …, paramN) => { statements }

    // Круглые скобки не обязательны для единственного параметра:
    (singleParam) => { statements }
    singleParam => { statements }

    // Функция без параметров нуждается в круглых скобках:
    () => { statements }


3. Методи масивів:

    1. splice - видалення, видалення і заміна, додавання (arr.splice(2, 0, "сложный", "язык")) 
    
        let arr = ["Я", "изучаю", "JavaScript"];

        arr.splice(1, 1); // начиная с позиции 1, удалить 1 элемент

        alert( arr ); // осталось ["Я", "JavaScript"]

    2. slice - повертає масив від між заданими індексами

        let arr = ["t", "e", "s", "t"];

        alert( arr.slice(1, 3) ); // e,s (копирует с 1 до 3)

        alert( arr.slice(-2) ); // s,t (копирует с -2 до конца)

    3. concat - зклєюю числа, масиви в один масив

        let arr = [1, 2];

        // создать массив из: arr и [3,4], потом добавить значения 5 и 6
        alert( arr.concat([3, 4], 5, 6) ); // 1,2,3,4,5,6
    
    4. forEach - перебір кожного елементу масива

    5. arr.indexOf(item, from) ищет item, начиная с индекса from, и возвращает индекс, на котором был найден искомый элемент, в противном случае -1.


    6. arr.lastIndexOf(item, from) – то же самое, но ищет справа налево.

    7. arr.includes(item, from) – ищет item, начиная с индекса from, и возвращает true, если поиск успешен.

    8. find - пошук в масивів

        let users = [
        {id: 1, name: "Вася"},
        {id: 2, name: "Петя"},
        {id: 3, name: "Маша"}
        ];

        let user = users.find(item => item.id == 1);

        alert(user.name); // Вася
    
    9. filter 

    10. map -  

    11. sort - сортує кожен елемент масиву як рядок

    12. reverse - повертає масив задом наперед

    13. split - Розбиває рядок за маркером

    14. join - об'єдную рядок за маркером

4. Promise 

    //Присвоїли значення а=5
    let a = 5
    //Вивели це значення
    console.log(a)
    //запускажмо Проміс
    let p = new Promise(function(resolve,reject){
        //Очікуємо на присвоєння а новому значенню
        setTimeout(() => {
            resolve(a=500)
        },  2000);
    });

    //Після присвоєння виконуємо функцію
    p.then(function(){
        console.log(a)
    })


5. CallBack - функція яка передана в іншу функцію у якості аргументу

6. Async await

7. ООП - починається з абстрагування моделі.

    7.1 Успадкування - extend, розширення, передача нащадкам методів там полів батьківського класу

    7.2 Поліморфізм - виконання одного і того ж методу по різному

    7.3 Інкапсуляція - приховування деяких реалізацій

